Example 1: Basic Array Initialization and Access

#include <iostream>
using namespace std;

int main() {
    // Declare an array of integers with 5 elements
    int numbers[5] = {1, 2, 3, 4, 5};

    // Access and print each element of the array
    for (int i = 0; i < 5; i++) {
        cout << "Element at index " << i << " is " << numbers[i] << endl;
    }

    return 0;
}

============================================================================================
Example 2: Array Input and Sum Calculation

#include <iostream>
using namespace std;

int main() {
    // Declare an array to hold 5 integers
    int numbers[5];
    int sum = 0;

    // Prompt the user to enter 5 integers
    cout << "Enter 5 integers:" << endl;
    for (int i = 0; i < 5; i++) {
        cin >> numbers[i]; // Store each input in the array
    }

    // Calculate the sum of the array elements
    for (int i = 0; i < 5; i++) {
        sum += numbers[i];
    }

    // Print the sum
    cout << "The sum of the entered numbers is: " << sum << endl;

    return 0;
}

============================================================================================

Example3: Creating a Singly Linked List

#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

int main() {
    Node* head = new Node();
    Node* second = new Node();
    Node* third = new Node();
    
    head->data = 1; // Assign data to first node
    head->next = second; // Link first node to second node
    
    second->data = 2; // Assign data to second node
    second->next = third; // Link second node to third node
    
    third->data = 3; // Assign data to third node
    third->next = nullptr; // End of the list
    
    return 0;
}


============================================================================================

Example 4: Singly Linked List Insertion at the Beginning

#include <iostream>
using namespace std;

// Define a Node structure
struct Node {
    int data;
    Node* next;
};

// Function to insert a new node at the beginning of the list
void insertAtBeginning(Node*& head, int newData) {
    Node* newNode = new Node();
    newNode->data = newData;
    newNode->next = head;
    head = newNode;
}

// Function to print the linked list
void printList(Node* node) {
    while (node != nullptr) {
        cout << "Node data: " << node->data << endl;
        node = node->next;
    }
}

int main() {
    // Initialize the head of the list
    Node* head = nullptr;

    // Insert nodes at the beginning
    insertAtBeginning(head, 3);
    insertAtBeginning(head, 2);
    insertAtBeginning(head, 1);

    // Print the linked list
    printList(head);

    // Clean up memory
    while (head != nullptr) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}



==================================================================================
Ex5: Traversing a Linked List

#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

void printList(Node* n) {
    while (n != nullptr) {
        cout << n->data << " ";
        n = n->next;
    }
    cout << endl;
}

int main() {
    Node* head = new Node();
    Node* second = new Node();
    Node* third = new Node();
    
    head->data = 1;
    head->next = second;
    
    second->data = 2;
    second->next = third;
    
    third->data = 3;
    third->next = nullptr;
    
    printList(head);
    
    return 0;
}


==================================================================
Ex6 stack


#include <stack>
#include <iostream>

int main() {
    std::stack<int> s;
    s.push(1);    // Stack: [1]
    s.push(2);    // Stack: [1, 2]
    s.push(3);    // Stack: [1, 2, 3]

    std::cout << "Top element: " << s.top() << std::endl; // Output: 3

    s.pop();      // Stack: [1, 2]
    std::cout << "Top element after pop: " << s.top() << std::endl; // Output: 2

    return 0;
}


========================================================================
Ex7:

#include <queue>
#include <iostream>
using namespace std;

int main() {
    queue<int> q;
    q.push(1);    // Enqueue: [1]
    q.push(2);    // Enqueue: [1, 2]
    q.push(3);    // Enqueue: [1, 2, 3]

    cout << "Front element: " << q.front() << endl; // Output: 1

    q.pop();      // Dequeue: [2, 3]
    cout << "Front element after dequeue: " << q.front() << endl; // Output: 2

    return 0;
}


===========================================================================================
Ex8:

#include <iostream>
#include <stack>
using namespace std;

int main() {
    // Declare a stack of integers
    stack<int> stack;

    // Push elements onto the stack
    stack.push(10);
    stack.push(20);
    stack.push(30);

    // Pop an element from the stack
    cout << stack.top() << " is at the top of the stack" << endl;
    stack.pop();
    
    // Print the top element
    cout << "Now, " << stack.top() << " is at the top of the stack" << endl;

    // Check if the stack is empty
    if (stack.empty()) {
        cout << "Stack is empty" << endl;
    } else {
        cout << "Stack is not empty" << endl;
    }

    return 0;
}

=====================================================================================================
Ex 9: Stack Using STL (Standard Template Library)

#include <iostream>
#include <stack>
using namespace std;

int main() {
    // Declare a stack of integers
    stack<int> stack;

    // Push elements onto the stack
    stack.push(10);
    stack.push(20);
    stack.push(30);

    // Pop an element from the stack
    cout << stack.top() << " is at the top of the stack" << endl;
    stack.pop();
    
    // Print the top element
    cout << "Now, " << stack.top() << " is at the top of the stack" << endl;

    // Check if the stack is empty
    if (stack.empty()) {
        cout << "Stack is empty" << endl;
    } else {
        cout << "Stack is not empty" << endl;
    }

    return 0;
}


============================================================================'
Ex 10 Tree 

#include <iostream>

using namespace std;

// Definition of a TreeNode
struct TreeNode {
    int data;         // Data field
    TreeNode* left;   // Pointer to the left child
    TreeNode* right;  // Pointer to the right child
};

// Function to create a new TreeNode with the given value
TreeNode* createNode(int value) {
    TreeNode* newNode = new TreeNode;
    newNode->data = value;
    newNode->left = nullptr;
    newNode->right = nullptr;
    return newNode;
}

int main() {
    // Creating three nodes
    TreeNode* root = createNode(1);       // Root node with value 1
    TreeNode* leftChild = createNode(2);  // Left child node with value 2
    TreeNode* rightChild = createNode(3); // Right child node with value 3

    // Linking the nodes to form a tree
    root->left = leftChild;
    root->right = rightChild;

    // Printing the tree structure
    cout << "Root Node: " << root->data << endl;
    cout << "Left Child of Root: " << root->left->data << endl;
    cout << "Right Child of Root: " << root->right->data << endl;

    // Cleaning up the dynamically allocated memory
    delete root;
    delete leftChild;
    delete rightChild;

    return 0;
}


=================================================================================================
Ex 11:

#include <iostream>

using namespace std;

// Definition of a TreeNode
struct TreeNode {
    int data;         // Data field
    TreeNode* left;   // Pointer to the left child
    TreeNode* right;  // Pointer to the right child
};

// Function to create a new TreeNode with the given value
TreeNode* createNode(int value) {
    TreeNode* newNode = new TreeNode;
    newNode->data = value;
    newNode->left = nullptr;
    newNode->right = nullptr;
    return newNode;
}

// Function to insert a new node into the binary tree
void insertNode(TreeNode* &root, int value) {
    if (root == nullptr) {
        root = createNode(value);
        return;
    }

    if (value < root->data) {
        insertNode(root->left, value);
    } else {
        insertNode(root->right, value);
    }
}

// Function to print the tree in inorder traversal
void printInorder(TreeNode* root) {
    if (root != nullptr) {
        printInorder(root->left);
        cout << root->data << " ";
        printInorder(root->right);
    }
}

int main() {
    // Creating an empty root node
    TreeNode* root = nullptr;

    // Inserting nodes into the tree
    insertNode(root, 1);
    insertNode(root, 2);
    insertNode(root, 3);
    insertNode(root, 4);
    insertNode(root, 5);

    // Printing the tree structure (inorder traversal)
    cout << "Inorder traversal of the tree: ";
    printInorder(root);
    cout << endl;

    // Cleaning up the dynamically allocated memory
    // This should be done in a separate function to handle deletion properly
    // For simplicity, memory cleanup is not included here
    // In a real-world scenario, you'd traverse the tree and delete nodes properly

    return 0;
}


===================================================================================
Ex12: 

#include <iostream>

using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

TreeNode* insert(TreeNode* root, int key) {
    if (root == nullptr) return new TreeNode(key);
    if (key < root->val) root->left = insert(root->left, key);
    else if (key > root->val) root->right = insert(root->right, key);
    return root;
}

TreeNode* findMin(TreeNode* node) {
    while (node->left != nullptr) {
        node = node->left;
    }
    return node;
}

TreeNode* deleteNode(TreeNode* root, int key) {
    if (root == nullptr) return nullptr;

    if (key < root->val) root->left = deleteNode(root->left, key);
    else if (key > root->val) root->right = deleteNode(root->right, key);
    else {
        if (root->left == nullptr) {
            TreeNode* temp = root->right;
            delete root;
            return temp;
        } else if (root->right == nullptr) {
            TreeNode* temp = root->left;
            delete root;
            return temp;
        }
        TreeNode* temp = findMin(root->right);
        root->val = temp->val;
        root->right = deleteNode(root->right, temp->val);
    }
    return root;
}

void inorder(TreeNode* root) {
    if (root != nullptr) {
        inorder(root->left);
        cout << root->val << " ";
        inorder(root->right);
    }
}

int main() {
    TreeNode* root = nullptr;
    root = insert(root, 5);
    root = insert(root, 3);
    root = insert(root, 8);
    root = insert(root, 2);
    root = insert(root, 4);
    root = insert(root, 7);
    root = insert(root, 9);

    cout << "Inorder traversal before deletion: ";
    inorder(root);
    cout << endl;

    root = deleteNode(root, 3);

    cout << "Inorder traversal after deletion: ";
    inorder(root);
    cout << endl;

    // Clean up memory
    // You would typically implement a separate function to deallocate memory

    return 0;
}

